# This "input" configures a global authorization rule to enable public access to
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

enum ReportStatus {
  solved
  pending
  processed
}

enum ServiceOfferStatus {
    pending
    accepted
    rejected
}

enum ChatType {
    SERVICE
    REPORT
}

input CreateUserDBInput {
    email: String!
    fullName: String!
    status: String!
    temporaryPassword: String!
}

type CustomerRate @model @auth(
    rules: [
        { allow: owner, ownerField: "createdById", operations: [create, update, delete, read] }
        { allow: private, operations: [ read ] }
    ]
) {
    id: ID!
    customerId: ID! @index(name: "byCustomer")
    serviceId: ID!
    createdById: ID!
    createdBy: String!
    rate: Float!
    comment: String
    createdAt: AWSDateTime
}

type TechnicianRate @model @auth(
    rules: [
        { allow: owner, ownerField: "createdById", operations: [create, update, delete, read] }
        { allow: private, operations: [ read ] }
    ]
) {
    id: ID!
    technicianId: ID! @index(name: "byTechnician")
    serviceId: ID!
    createdById: ID!
    createdBy: String!
    rate: Float!
    comment: String
    createdAt: AWSDateTime
}

type Report @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: owner, ownerField: "createdBy", operations: [ read, update, create, delete ] }
        { allow: private, operations: [ read, update, create, delete ] }
    ]
){
    id: ID!
    user: User! @hasOne
    title: String!
    description: String!
    image: String
    customer: Customer @hasOne
    technician: Technician @hasOne
    createdAt: AWSDateTime
    status: ReportStatus!
    answers: [Answer] @hasMany(indexName: "byReport", fields: ["id"])
}

type Answer @model @auth(
    rules: [{ allow: private, operations: [ read, update, create, delete ] }]
) {
    id: ID!
    user: User! @hasOne
    text: String!
    reportId: ID! @index(name: "byReport")
    report: Report! @belongsTo(fields: ["reportId"])
    createdAt: AWSDateTime
}

type User @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: owner, operations: [ read, update, create, delete ] }
        { allow: private, operations: [ read ] }
        { allow: public, provider: iam, operations: [ create ] }
    ]
) {
    id: ID!
    email: String
    fullName: String
    contactNumber: String
    status: String
    profilePicture: String
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type Technician @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: owner, ownerField: "id", operations: [ read, update, create, delete ] }
        { allow: public, provider: iam, operations: [ create ] }
        { allow: private, operations: [ read ] }
    ]
) {
    id: ID!  
    email: String
    fullName: String
    contactNumber: String
    status: String
    online_status: String
    address: String
    city: String
    state: String
    profilePicture: String
    zipCode: Int
    subscription: String
    stripeId: String
    stripeAccountStatus: String
    subscriptionExpirationDate: AWSDateTime
    subscriptionId: String
    subscriptionStatus: String
    fee: Int
    rate: [TechnicianRate] @hasMany(indexName: "byTechnician", fields: ["id"])
    loLatitude: Float
    loLongitude: Float
    diagnosticPrice: Float
    repairPriceHour: Float
    certifications: [Certification]
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    schedule: Schedule
}

type Certification {
    name: String!
    issuingOrganization: String! 
    issueDate: String  
    expirationDate: String  
    credentialId: String     
    credentialUrl: String    
}

type Car @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: owner,operations: [ read, update, create, delete ] }
        { allow: private, operations: [ read ] }
    ]
) {
    id: ID! @index
    description: String
    brand: String!
    image: String!
    model: String!
    year: String!
    identificationNumber: String!
}

type Customer @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }, { allow: public, provider: iam, operations: [ create ] }, { allow: owner, ownerField: "id" }, { allow: private, operations: [ read ]}
    ]
) {
    id: ID!
    email: String
    fullName: String
    contactNumber: String
    status: String
    address: String
    city: String
    state: String
    profilePicture: String
    zipCode: Int
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    cars: [Car] @hasMany
    rate: [CustomerRate] @hasMany(indexName: "byCustomer", fields: ["id"])
}

type Schedule {
    monday: DailySchedule
    tuesday: DailySchedule
    wednesday: DailySchedule
    thursday: DailySchedule
    friday: DailySchedule
    saturday: DailySchedule
    sunday: DailySchedule
}

type DailySchedule {
    opening: String
    closing: String
}

type Service @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: private, operations: [ read, update, create, delete ] }
    ]
) {
    id: ID!
    title: String!
    description: String!
    type: String!
    status: String!
    completed: String
    address: String
    originLatitude: Float!
    originLongitude: Float!
    customerId: ID! @index(name: "servicesByCustomer")
    customer: ICustomer
    technicianSelected: Technician @hasOne
    destLatitude: Float
    destLongitude: Float
    offers: [Offer] @hasMany(indexName: "byOffer", fields: ["id"])
    car: ICar
    paymentMethod: String!
    price: Float
    paymentLink: String
    tax: Float
    total: Float
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type Offer @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: private, operations: [ read, update, create, delete ] }
    ]
) {
    id: ID!
    serviceId: ID! @index(name: "byOffer")
    service: Service! @belongsTo(fields: ["serviceId"])
    technician: Technician @hasOne
    amount: Float!
    status: ServiceOfferStatus!
    text: String!
}


type Chat @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: private, operations: [ read, create, update, delete ] }
    ]
) {
    id: ID!
    customer: Customer! @hasOne
    technicianSelected: Technician @hasOne
    admin: User @hasOne
    messages: [Message] @hasMany(indexName: "byChat", fields: ["id"])
    chatType: ChatType
}

type Message @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: owner, ownerField: "sender", operations: [ read, update, create, delete ] }
        { allow: private, operations: [ read ] }
    ]
){
    id: ID!
    content: String!
    image: String
    sender: ID!
    to: ID!
    chatId: ID! @index(name: "byChat")
}

type Goal @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
    ]
){
    id: ID!
    type: GoalType!
    goal: Int!
    monthYear: String! @index
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

enum GoalType {
    MONTHLY
    ANNUAL
}

type ICustomer {
    id: ID!
    fullName: String!
    profilePicture: String
}

type ICar {
    id: ID!
    brand: String!
    image: String!
    model: String!
    year: String!
    identificationNumber: String!
}

type Query {
  getNearbyTechnicians(lat: Float!, lon: Float!): [Technician] @function(name: "filterTechniciansQuery-dev") @auth(rules: [{ allow: private }])
  getNearbyServices(lat: Float!, lon: Float!): [Service] @function(name: "filterServicesQuery-dev") @auth(rules: [{ allow: private }])
}

type Mutation {
    createUserFromAdminPanel(user: CreateUserDBInput!): User! @function(name: "createAdminFromPanel-dev") @auth(rules: [{ allow: groups, groups: ["admin-access"] }])
    deleteUserFromAdminPanel(id: ID!, username: String!): ID! @function(name: "deleteUserFromAdminPanel-dev") @auth(rules: [{ allow: groups, groups: ["admin-access"] }])
}