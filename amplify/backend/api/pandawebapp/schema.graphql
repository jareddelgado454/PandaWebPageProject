# This "input" configures a global authorization rule to enable public access to
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

enum ReportStatus {
  solved
  pending
  processed
}

enum ServiceOfferStatus {
    pending
    accepted
    rejected
}

type Report @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: owner, ownerField: "createdBy", operations: [ read, update, create, delete ] }
    ]
){
    id: ID!
    user: User! @hasOne
    title: String!
    description: String!
    image: String
    createdAt: AWSDateTime
    status: ReportStatus!
    answers: [Answer] @hasMany(indexName: "byReport", fields: ["id"])
}

type Answer @model @auth(
    rules: [{ allow: private, operations: [ read, update, create, delete ] }]
) {
    id: ID!
    user: User! @hasOne
    text: String!
    reportId: ID! @index(name: "byReport")
    report: Report! @belongsTo(fields: ["reportId"])
    createdAt: AWSDateTime
}

type User @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: owner, ownerField: "cognitoId", operations: [ read, update, create, delete ] }
        { allow: public, provider: iam, operations: [ create ] }
    ]
) {
    id: ID!
    email: String
    role: String
    fullName: String
    contactNumber: String
    status: String
    address: String
    city: String
    state: String
    profilePicture: String
    zipCode: Int
    subscription: String
    cognitoId: String
    fee: Int
    rate: Float
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type Technician @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: owner, ownerField: "id", operations: [ read, update, create, delete ] }
        { allow: public, provider: iam, operations: [ create ] }
    ]
) {
    id: ID!  
    email: String
    fullName: String
    contactNumber: String
    status: String
    address: String
    city: String
    state: String
    profilePicture: String
    zipCode: Int
    subscription: String
    fee: Int
    rate: Float
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    schedule: Schedule
}

type Customer @model @auth(
    rules: [
        { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
        { allow: owner, ownerField: "cognitoId", operations: [ read, update, create, delete ] }
        { allow: public, provider: iam, operations: [ create ] }
    ]
) {
    id: ID!
    email: String
    fullName: String
    contactNumber: String
    status: String
    address: String
    city: String
    state: String
    profilePicture: String
    zipCode: Int
    subscription: String
    cognitoId: String
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type Schedule {
    monday: DailySchedule
    tuesday: DailySchedule
    wednesday: DailySchedule
    thursday: DailySchedule
    friday: DailySchedule
    saturday: DailySchedule
    sunday: DailySchedule
}

type DailySchedule {
    opening: String
    closing: String
}

type Service @model {
    id: ID!
    title: String!
    description: String!
    type: String!
    status: String!
    originLatitude: Float!
    originLongitude: Float!
    customer: Customer! @hasOne
    technician: Technician! @hasOne
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type ServiceOffer @model {
    id: ID!
    service: Service @hasOne
    technician: Technician @hasOne
    amount: Float!
    status: ServiceOfferStatus!
}

# type Chat @model @auth(
#     rules: [
#         { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
#         { allow: owner, ownerField: "members", operations: [ read, update, create, delete ] }
#     ]
# ) {
#     id: ID!
#     messages: [Message] @hasMany
#     members: [User]! @hasMany
# }

# type Message @model @auth(
#     rules: [
#         { allow: groups, groups: ["admin-access"], operations: [create, update, delete, read] }
#         { allow: owner, ownerField: "sender", operations: [ read, update, create, delete ] }
#     ]
# ){
#     id: ID!
#     content: String!
#     sender: ID!
#     chat: Chat @belongsTo
# }
